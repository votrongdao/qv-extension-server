using System;
using System.Web;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.IO;

using myCore = frqtlib.Core;

namespace QlikViewExtensionServerWS.Models
{
    public class ExportRepository : IExportRepository
    {
        string path = System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath;

        private void DeleteAllFromFolder()
        {
            DirectoryInfo d = new DirectoryInfo(Path.Combine(path, "cpcb"));
            foreach (FileInfo f in d.GetFiles())
            {
                if ((f.CreationTime.AddMinutes(2) < DateTime.Now) && f.Extension != ".css")
                {
                    myCore.Logging.log("Deleting {0} ...", 5, myCore.LogType.Information, f.FullName);
                    File.Delete(f.FullName);
                }
            }
        }

        public string saveAsPDF(string txt, string nme, int wid, double zoom)
        {
            myCore.Logging.log("ExportController saveAsPDF({0}, {1}, {2}, {3}) ...", 5, myCore.LogType.Information, txt, nme, wid, zoom);

            DeleteAllFromFolder();

            string id = DateTime.UtcNow.ToString("yyyyMMddHHmmssffff");

            System.Diagnostics.Process p = new System.Diagnostics.Process();
            p.StartInfo.FileName = "C:/Program Files (x86)/wkhtmltopdf/wkhtmltopdf.exe";
            p.StartInfo.UseShellExecute = false;

            
            string htmlFName = Path.Combine(path, "cpcb", "html-" + id + ".html");

            TextWriter tw = new StreamWriter(htmlFName);
            tw.WriteLine(txt);
            tw.Close();
            
            string pdfFName = Path.Combine(path, "cpcb", "pdf-" + id + ".pdf");
            string nm = nme;
            string ar = "--zoom " + zoom + " --page-size A4 --encoding utf-8 --header-spacing 3 -O Landscape --header-center " + "\"Generated by " + nm + " the " + DateTime.Now.ToString() + "\"" + " \"" + htmlFName + "\"" + " \"" + pdfFName + "\"";

            myCore.Logging.log(ar, 5, myCore.LogType.Information);

            p.StartInfo.Arguments = ar;

            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;

            p.OutputDataReceived += p_OutputDataReceived;
            p.ErrorDataReceived += p_ErrorDataReceived;

            p.Start();

            if (p.WaitForExit(10000))
            {
                myCore.Logging.log("Successfully generated pdf : {0}", 3, myCore.LogType.Information, "pdf-" + id + ".pdf");
                return "pdf-" + id + ".pdf";
            }
            else return null;
        }

        public string saveAsImg(string txt, string nme, int wid)
        {
            myCore.Logging.log("ExportController saveAsImg({0}, {1}, {2}) ...", 5, myCore.LogType.Information, txt, nme, wid);

            DeleteAllFromFolder();

            string id = DateTime.UtcNow.ToString("yyyyMMddHHmmssffff");

            System.Diagnostics.Process p = new System.Diagnostics.Process();
            p.StartInfo.FileName = "C:/Program Files (x86)/wkhtmltopdf/wkhtmltoimage.exe";
            p.StartInfo.UseShellExecute = false;

            string htmlFName = Path.Combine(path, "cpcb", "html-" + id + ".html");

            TextWriter tw = new StreamWriter(htmlFName);
            tw.WriteLine(txt);
            tw.Close();

            string imgFName = Path.Combine(path, "cpcb", "img-" + id + ".jpg");
            string nm = nme;
            string ar = "--encoding utf-8 --quality 100 --width " + wid + " " + "\"" + htmlFName + "\"" + " \"" + imgFName + "\"";

            myCore.Logging.log(ar, 5, myCore.LogType.Information);

            p.StartInfo.Arguments = ar;

            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardError = true;

            p.OutputDataReceived += p_OutputDataReceived;
            p.ErrorDataReceived += p_ErrorDataReceived;

            p.Start();



            if (p.WaitForExit(10000))
            {
                myCore.Logging.log("Successfully generated image : {0}", 3, myCore.LogType.Information, "img-" + id + ".jpg");
                return "img-" + id + ".jpg";
            }
            else return null;
        }

        void p_ErrorDataReceived(object sender, System.Diagnostics.DataReceivedEventArgs e)
        {
            myCore.Logging.log(e.Data, 6, myCore.LogType.Error);
        }

        void p_OutputDataReceived(object sender, System.Diagnostics.DataReceivedEventArgs e)
        {
            myCore.Logging.log(e.Data, 6, myCore.LogType.Information);
        }
    }
}